import{v as T,aC as h,jq as V,jP as b,ks as v,ly as H,az as S,ka as L,g7 as j,kt as k,fY as M,lu as U,Y as B,d1 as A,bg as C,F as q,I as G,b5 as D,kF as N,kE as W,d4 as Y,lh as y,hK as K,lg as x,lm as w,io as p,aw as g,j as u,mq as n,lL as f,kL as Q,mr as X,ms as O}from"./vendor.508dc62e.js";import{G as J,V as Z}from"./ExtendedLineVisualElement.7b128dc9.js";import{n as ee}from"./Object3DVisualElement.0959ced1.js";import{S as $}from"./PointVisualElement.73e39506.js";import{j as te}from"./RightAngleQuadVisualElement.eb2e2a1c.js";import{r as ie}from"./SnappingContext.6a9c04a5.js";class re extends ee{constructor(e){super(e),this._handles=new T,this._location=h(),this._direction=V(1,0,0),this._width=1,this._offset=1,this._length=18,this._color=b(1,0,1,1),this._renderOccluded=v.OccludeAndTransparent,this.applyProps(e)}get location(){return this._location}set location(e){H(this._location,e)||(S(this._location,e),this._updateGeometry())}get direction(){return this._direction}set direction(e){H(this._direction,e)||(S(this._direction,e),this._updateGeometry())}setDirectionFromPoints(e,t){L(this._direction,j(this._direction,t,e)),this._updateGeometry()}get width(){return this._width}set width(e){e!==this._width&&(this._width=e,this._updateMaterial())}get offset(){return this._offset}set offset(e){e!==this._offset&&(this._offset=e,this._updateGeometry())}get length(){return this._length}set length(e){e!==this._length&&(this._length=e,this._updateGeometry())}get color(){return this._color}set color(e){k(e,this._color)||(M(this._color,e),this._updateMaterial())}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}createExternalResources(){const e=new U(this.materialParameters);this._handles.add(B(()=>this.view.state.camera,()=>{this._updateGeometry()})),this._externalResources={material:e}}destroyExternalResources(){this._handles.removeAll(),this._externalResources=null}createGeometries(e){const t=A.createPolylineGeometry([h(),h()]),r=A.createPolylineGeometry([h(),h()]),i=C(this._externalResources).material;e.addGeometry(t,i),e.addGeometry(r,i),this._updateVertices(e)}forEachExternalMaterial(e){q(this._externalResources)&&e(this._externalResources.material)}_updateMaterial(){G(this._externalResources)||this._externalResources.material.setParameters(this.materialParameters)}get materialParameters(){return{width:this._width,color:this._color,renderOccluded:this._renderOccluded}}_updateGeometry(){const e=this.object;G(e)||this._updateVertices(e)}_updateVertices(e){const t=this.view.state.camera;t.projectToScreen(this.location,E),D(c,this.location,this.direction),t.projectToScreen(c,_),N(_,W(_,_,E)),this._updateVertexAttributes(t,e,0,E,_,1),this._updateVertexAttributes(t,e,1,E,_,-1)}_updateVertexAttributes(e,t,r,i,a,l){const s=t.geometryRecords[r],o=s.geometry.getMutableAttribute(Y.POSITION).data,d=y(P,K(P,a[1]*l,a[0]*-l),this.offset+this.width/2),m=x(R,x(R,x(R,i,y(R,a,this.length/2)),d),d),F=x(I,m,y(I,a,-this.length));e.unprojectFromScreen(m,c),o[0]=c[0],o[1]=c[1],o[2]=c[2],e.unprojectFromScreen(F,c),o[3]=c[0],o[4]=c[1],o[5]=c[2],t.geometryVertexAttrsUpdated(s)}}const c=h(),E=w(),_=w(),P=w(),R=w(),I=w();class de extends ie{visualizeIntersectionPoint(e,t){const{coordinateHelper:r,view:i}=t;return p(new $({view:i,primitive:"circle",geometry:r.vectorToPoint(e.intersectionPoint),elevationInfo:g(e.elevationInfo,t.elevationInfo),size:20,outlineSize:2,color:[0,0,0,0],outlineColor:u.toUnitRGBA(n.orange),pixelSnappingEnabled:!1}))}visualizePoint(e,t){const{coordinateHelper:r,view:i}=t;return p(new $({view:i,primitive:"circle",geometry:r.vectorToPoint(e.point),elevationInfo:g(e.elevationInfo,t.elevationInfo),size:20,outlineSize:2,color:[0,0,0,0],outlineColor:u.toUnitRGBA(n.orange),pixelSnappingEnabled:!1}))}visualizeLine(e,t){const{coordinateHelper:r,view:i}=t;return p(this._createLineSegmentHintFromMap(e.type,e.lineStart,e.lineEnd,r,g(e.elevationInfo,t.elevationInfo),i,e.fadeLeft,e.fadeRight))}visualizeParallelSign(e,t){const{coordinateHelper:r,view:i}=t,a=g(e.elevationInfo,t.elevationInfo),l=f(e.lineStart,r,a,t.view),s=f(e.lineEnd,r,a,t.view),o=Q(s,l,s,.5),d=new re({view:i,attached:!1,offset:n.parallelLineHintOffset,length:n.parallelLineHintLength,width:n.parallelLineHintWidth,color:u.toUnitRGBA(n.orange),location:o,renderOccluded:v.Opaque});return d.setDirectionFromPoints(l,o),d.attached=!0,p(d)}visualizeRightAngleQuad(e,t){const{coordinateHelper:r,view:i}=t,a=g(e.elevationInfo,t.elevationInfo);return p(new te({view:i,attached:!0,color:u.toUnitRGBA(n.orange),renderOccluded:v.Transparent,outlineRenderOccluded:v.Opaque,outlineColor:u.toUnitRGBA(n.orange),outlineSize:n.rightAngleHintOutlineSize,size:n.rightAngleHintSize,geometry:{previous:f(e.previousVertex,r,a,i),center:f(e.centerVertex,r,a,i),next:f(e.nextVertex,r,a,i)}}))}_createLineSegmentHintFromMap(e,t,r,i,a,l,s=!0,o=!0){const d=h(),m=h();return X(t,r,i,a,l,d,m),this._createLineSegmentHint(e,l,d,m,s,o)}_createLineSegmentHint(e,t,r,i,a=!0,l=!0){const s=new J({view:t,extensionType:Z.FADED,start:r,end:i,color:u.toUnitRGBA(n.orange),renderOccluded:v.Opaque});switch(e){case O.TARGET:s.width=n.lineHintWidthTarget,s.fadedExtensions={start:0,end:n.lineHintFadedExtensions};break;case O.REFERENCE_EXTENSION:s.width=n.lineHintWidthReference,s.fadedExtensions={start:0,end:0};break;case O.REFERENCE:s.width=n.lineHintWidthReference,s.fadedExtensions={start:a?n.lineHintFadedExtensions:0,end:l?n.lineHintFadedExtensions:0}}return s.attached=!0,s}}export{de as g};
