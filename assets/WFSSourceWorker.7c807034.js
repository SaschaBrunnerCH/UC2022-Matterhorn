import{an as h,gK as l,py as o,F as m,gO as _,gI as d,c8 as f,ei as w,bg as E,aU as u,i9 as F,X as q,ar as S,gB as x}from"./vendor.508dc62e.js";import{u as T}from"./FeatureStore.b2668ae4.js";import{Y as b}from"./QueryEngine.a0f78978.js";import{O as I,L as j}from"./geojson.a34a575b.js";import{m as C}from"./sourceUtils.ed1fba78.js";import{K as P}from"./wfsUtils.1bdd8207.js";import"./PooledRBush.b58f60ab.js";import"./quickselect.03306040.js";import"./optimizedFeatureQueryEngineAdapter.af16ee02.js";import"./QueryEngineCapabilities.c2e9875c.js";import"./xmlUtils.986ddba5.js";class B{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async e=>{const{objectIdField:t}=this._queryEngine,r=await P(this._getFeatureUrl,this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(s=>s.name),signal:e});await I(r),h(e);const a=j(r,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:t});if(!l(this._queryEngine.spatialReference,o))for(const s of a)m(s.geometry)&&(s.geometry=_(d(f(s.geometry,this._queryEngine.geometryType,!1,!1),o,this._queryEngine.spatialReference)));let n=1;for(const s of a){const i={};C(this._fieldsIndex,i,s.attributes,!0),s.attributes=i,s.attributes[t]==null&&(s.objectId=s.attributes[t]=n++)}return a}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=null}async load(e,t){const{getFeatureUrl:r,getFeatureOutputFormat:a,spatialReference:n,fields:s,geometryType:i,featureType:p,objectIdField:y,customParameters:c}=e;this._featureType=p,this._customParameters=c,this._getFeatureUrl=r,this._getFeatureOutputFormat=a,this._fieldsIndex=new w(s),await this._checkProjection(n),h(t),this._queryEngine=new b({fields:s,geometryType:i,hasM:!1,hasZ:!1,objectIdField:y,spatialReference:n,timeInfo:null,featureStore:new T({geometryType:i,hasM:!1,hasZ:!1})});const g=await this._snapshotFeatures(E(t.signal));return this._queryEngine.featureStore.addMany(g),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var t;return this._customParameters=e,(t=this._snapshotTask)==null||t.abort(),this._snapshotTask=F(this._snapshotFeatures),this._snapshotTask.promise.then(r=>{this._queryEngine.featureStore.clear(),r&&this._queryEngine.featureStore.addMany(r)},r=>{this._queryEngine.featureStore.clear(),q(r)||S.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:r}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(e){try{await x(o,e)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:e})}}}export{B as default};
