var x=Object.defineProperty,h=Object.defineProperties;var S=Object.getOwnPropertyDescriptors;var d=Object.getOwnPropertySymbols;var R=Object.prototype.hasOwnProperty,O=Object.prototype.propertyIsEnumerable;var w=(e,t,r)=>t in e?x(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,o=(e,t)=>{for(var r in t||(t={}))R.call(t,r)&&w(e,r,t[r]);if(d)for(var r of d(t))O.call(t,r)&&w(e,r,t[r]);return e},u=(e,t)=>h(e,S(t));import{jD as E,cy as m,b7 as y}from"./vendor.508dc62e.js";function a(e){var t;return Array.isArray(e)?(t=e[0])==null?void 0:t.spatialReference:e==null?void 0:e.spatialReference}function g(e){return e&&(Array.isArray(e)?e.map(g):e.toJSON?e.toJSON():e)}function s(e){return Array.isArray(e)?e.map(t=>m(t)):m(e)}function J(e,t){let r;return Array.isArray(e)?r=e:(r=[],r.push(e),t!=null&&r.push(t)),r}let l;async function N(){return l||(l=E("geometryEngineWorker",{strategy:"distributed"})),l}async function n(e,t){return(await N()).invoke("executeGEOperation",{operation:e,parameters:g(t)})}function D(e){return n("extendedSpatialReferenceInfo",[e])}async function I(e,t){return s(await n("clip",[a(e),e,t]))}async function b(e,t){return s(await n("cut",[a(e),e,t]))}function j(e,t){return n("contains",[a(e),e,t])}function z(e,t){return n("crosses",[a(e),e,t])}function H(e,t,r){return n("distance",[a(e),e,t,r])}function L(e,t){return n("equals",[a(e),e,t])}function k(e,t){return n("intersects",[a(e),e,t])}function q(e,t){return n("touches",[a(e),e,t])}function B(e,t){return n("within",[a(e),e,t])}function C(e,t){return n("disjoint",[a(e),e,t])}function $(e,t){return n("overlaps",[a(e),e,t])}function G(e,t,r){return n("relate",[a(e),e,t,r])}function W(e){return n("isSimple",[a(e),e])}async function F(e){return s(await n("simplify",[a(e),e]))}async function K(e,t=!1){return s(await n("convexHull",[a(e),e,t]))}async function M(e,t){return s(await n("difference",[a(e),e,t]))}async function P(e,t){return s(await n("symmetricDifference",[a(e),e,t]))}async function U(e,t){return s(await n("intersect",[a(e),e,t]))}async function Q(e,t=null){const r=J(e,t);return s(await n("union",[a(r),r]))}async function T(e,t,r,i,c,f){return s(await n("offset",[a(e),e,t,r,i,c,f]))}async function X(e,t,r,i=!1){const c=[a(e),e,t,r,i];return s(await n("buffer",c))}async function Y(e,t,r,i,c,f){const A=[a(e),e,t,r,i,c,f];return s(await n("geodesicBuffer",A))}async function Z(e,t,r=!0){const i=await n("nearestCoordinate",[a(e),e,t,r]);return u(o({},i),{coordinate:y.fromJSON(i.coordinate)})}async function _(e,t){const r=await n("nearestVertex",[a(e),e,t]);return u(o({},r),{coordinate:y.fromJSON(r.coordinate)})}async function ee(e,t,r,i){return(await n("nearestVertices",[a(e),e,t,r,i])).map(c=>u(o({},c),{coordinate:y.fromJSON(c.coordinate)}))}function p(e){return"xmin"in e?e.center:"x"in e?e:e.extent.center}async function te(e,t,r){if(e==null)throw new Error("Illegal Argument Exception");const i=e.spatialReference;r=r!=null?r:p(e);const c=e.constructor.fromJSON(await n("rotate",[i,e,t,r]));return c.spatialReference=i,c}async function re(e,t){if(e==null)throw new Error("Illegal Argument Exception");const r=e.spatialReference;t=t!=null?t:p(e);const i=e.constructor.fromJSON(await n("flipHorizontal",[r,e,t]));return i.spatialReference=r,i}async function ne(e,t){if(e==null)throw new Error("Illegal Argument Exception");const r=e.spatialReference;t=t!=null?t:p(e);const i=e.constructor.fromJSON(await n("flipVertical",[r,e,t]));return i.spatialReference=r,i}async function ae(e,t,r,i){return s(await n("generalize",[a(e),e,t,r,i]))}async function ie(e,t,r){return s(await n("densify",[a(e),e,t,r]))}async function se(e,t,r,i=0){return s(await n("geodesicDensify",[a(e),e,t,r,i]))}function ce(e,t){return n("planarArea",[a(e),e,t])}function oe(e,t){return n("planarLength",[a(e),e,t])}function ue(e,t,r){return n("geodesicArea",[a(e),e,t,r])}function fe(e,t,r){return n("geodesicLength",[a(e),e,t,r])}export{X as buffer,I as clip,j as contains,K as convexHull,z as crosses,b as cut,ie as densify,M as difference,C as disjoint,H as distance,L as equals,D as extendedSpatialReferenceInfo,re as flipHorizontal,ne as flipVertical,ae as generalize,ue as geodesicArea,Y as geodesicBuffer,se as geodesicDensify,fe as geodesicLength,U as intersect,k as intersects,W as isSimple,Z as nearestCoordinate,_ as nearestVertex,ee as nearestVertices,T as offset,$ as overlaps,ce as planarArea,oe as planarLength,G as relate,te as rotate,F as simplify,P as symmetricDifference,q as touches,Q as union,B as within};
